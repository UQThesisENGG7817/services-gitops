defaultRules:
  create: false

alertmanager:
  config:
    global:
      resolve_timeout: 5m
    time_intervals:
      - name: qld-work-hours
        time_intervals:
        - times:
          - start_time: '09:00'
            end_time: '23:00'
          weekdays: ['sunday:monday']
          location: "Australia/Brisbane"
    inhibit_rules:
      - source_matchers:
          - 'severity = critical'
        target_matchers:
          - 'severity =~ warning|info'
        equal:
          - 'namespace'
          - 'alertname'
          - 'pod'
      - source_matchers:
          - 'severity = warning'
        target_matchers:
          - 'severity = info'
        equal:
          - 'namespace'
          - 'alertname'
          - 'pod'
      # - source_matchers:
      #     - 'alertname = QLDOffHours'
      #   target_matchers:
      #     - severity =~ ".*"
      # - source_matchers:
      #     - 'alertname = InfoInhibitor'
      #   target_matchers:
      #     - 'severity = info'
      #   equal:
      #     - 'namespace'
    route:
      group_by: ['alertname', 'cluster', 'namespace']
      group_wait: 30s
      group_interval: 2m
      repeat_interval: 1h
      receiver: 'null'
      routes:
      - receiver: 'null'
        matchers:
          - alertname =~ "InfoInhibitor|Watchdog|QLDOffHours"
      - receiver: 'robusta'
        matchers:
          - severity =~ ".*"
        # active_time_intervals:
        #   - qld-work-hours
        continue: true # 
    receivers:
    - name: 'null'
    - name: 'robusta'
      webhook_configs:
        - url: 'http://robusta-runner.observability.svc.cluster.local/api/alerts' # 
          send_resolved: true # 
    templates:
    - '/etc/alertmanager/config/*.tmpl'
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
       nginx.ingress.kubernetes.io/ssl-passthrough: "true"
       nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    hosts:
      - alertmanager.pinnamon.com
    paths:
      - /
    tls:
    - hosts:
      - alertmanager.pinnamon.com
      secretName: alertmanager-tls
    pathType: Prefix
  alertmanagerSpec:
    externalUrl: https://alertmanager.pinnamon.com
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: default
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 5Gi
    nodeSelector:
      magnum.openstack.org/role: worker
    resources:
      requests:
        memory: 100Mi
        cpu: 100m
      limits:
        memory: 500Mi

grafana:
  enabled: false

kubeApiServer:
  enabled: false

kubeControllerManager:
  enabled: false

kubeEtcd:
  enabled: false

kubeScheduler:
  enabled: false

kube-state-metrics:
  resources:
    requests:
      memory: 100Mi
      cpu: 100m
    limits:
      memory: 500Mi
  nodeSelector:
    magnum.openstack.org/role: worker

prometheusOperator:
  admissionWebhooks:
    certManager:
      enabled: true
    # volumes:
    #   - name: tls-certificates
    #     secret:
    #       items:
    #       - key: tls.crt
    #         path: tls.crt
    #       - key: tls.key
    #         path: tls.key
    #       secretName: kube-prometheus-stack-admission
    patch:
      nodeSelector:
        magnum.openstack.org/role: worker
  nodeSelector:
    magnum.openstack.org/role: worker

prometheus:
  ingress:
    enabled: true
    ingressClassName: nginx
    annotations:
       nginx.ingress.kubernetes.io/ssl-passthrough: "true"
       nginx.ingress.kubernetes.io/backend-protocol: "HTTP"
    hosts:
      - logging.pinnamon.com
    pathType: Prefix
    tls:
    - hosts:
      - logging.pinnamon.com
      secretName: logging-tls
    paths:
      - /
  prometheusSpec:
    externalLabels:
      cluster: "potter_gha_2"
    externalUrl: "https://logging.pinnamon.com"
    enableFeatures:
      - expand-external-labels
    nodeSelector:
      magnum.openstack.org/role: worker
    ruleSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    retention: 60d
    retentionSize: "40GB"
    resources:
      requests:
        memory: 2Gi
        cpu: 200m
      limits:
        memory: 4Gi
    storageSpec:
      volumeClaimTemplate:
        spec:
          accessModes: ["ReadWriteOnce"]
          resources:
            requests:
              storage: 50Gi
    additionalScrapeConfigs:
      - job_name: 'kubernetes-pods'
        honor_labels: true
        kubernetes_sd_configs:
          - role: pod
        relabel_configs:
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
            action: keep
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape_slow]
            action: drop
            regex: true
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
            action: replace
            regex: (https?)
            target_label: __scheme__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
            action: replace
            target_label: __metrics_path__
            regex: (.+)
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
            action: replace
            regex: (\d+);(([A-Fa-f0-9]{1,4}::?){1,7}[A-Fa-f0-9]{1,4})
            replacement: '[$2]:$1'
            target_label: __address__
          - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_port, __meta_kubernetes_pod_ip]
            action: replace
            regex: (\d+);((([0-9]+?)(\.|$)){4})
            replacement: $2:$1
            target_label: __address__
          - action: labelmap
            regex: __meta_kubernetes_pod_annotation_prometheus_io_param_(.+)
            replacement: __param_$1
          - action: labelmap
            regex: __meta_kubernetes_pod_label_(.+)
          - source_labels: [__meta_kubernetes_namespace]
            action: replace
            target_label: namespace
          - source_labels: [__meta_kubernetes_pod_name]
            action: replace
            target_label: pod
          - source_labels: [__meta_kubernetes_pod_phase]
            regex: Pending|Succeeded|Failed|Completed
            action: drop
          - source_labels: [__meta_kubernetes_pod_node_name]
            action: replace
            target_label: node
      # - job_name: 'kubernetes-service-endpoints'
      #   honor_labels: true
      #   kubernetes_sd_configs:
      #     - role: endpoints
      #   relabel_configs:
      #     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
      #       action: keep
      #       regex: true
      #     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape_slow]
      #       action: drop
      #       regex: true
      #     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
      #       action: replace
      #       target_label: __scheme__
      #       regex: (https?)
      #     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
      #       action: replace
      #       target_label: __metrics_path__
      #       regex: (.+)
      #     - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
      #       action: replace
      #       target_label: __address__
      #       regex: (.+?)(?::\d+)?;(\d+)
      #       replacement: $1:$2
      #     - action: labelmap
      #       regex: __meta_kubernetes_service_annotation_prometheus_io_param_(.+)
      #       replacement: __param_$1
      #     - action: labelmap
      #       regex: __meta_kubernetes_service_label_(.+)
      #     - source_labels: [__meta_kubernetes_namespace]
      #       action: replace
      #       target_label: namespace
      #     - source_labels: [__meta_kubernetes_service_name]
      #       action: replace
      #       target_label: service
      #     - source_labels: [__meta_kubernetes_pod_node_name]
      #       action: replace
      #       target_label: node
      # - job_name: 'kubernetes-services'
      #   honor_labels: true
      #   metrics_path: /probe
      #   params:
      #     module: [http_2xx]
      #   kubernetes_sd_configs:
      #     - role: service
      #   relabel_configs:
      #     - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_probe]
      #       action: keep
      #       regex: true
      #     - source_labels: [__address__]
      #       target_label: __param_target
      #     - target_label: __address__
      #       replacement: blackbox
      #     - source_labels: [__param_target]
      #       target_label: instance
      #     - action: labelmap
      #       regex: __meta_kubernetes_service_label_(.+)
      #     - source_labels: [__meta_kubernetes_namespace]
      #       target_label: namespace
      #     - source_labels: [__meta_kubernetes_service_name]
      #       target_label: service
# prometheus-node-exporter:
#   prometheus:
#     monitor:
#       # Use additional scrape config to scrape node-exporter
#       # https://stackoverflow.com/questions/54722137/labels-from-nodes-to-daemonset-kube-prometheus-exporter-node
#       enabled: false

nodeExporter:
  enabled: true ## disabled due to alloy using port